
MyProject_LED_PE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6b  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ec  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049f  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b2  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000256  00000000  00000000  00002616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	04 d0       	rcall	.+8      	; 0xb2 <main>
  aa:	73 c0       	rjmp	.+230    	; 0x192 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  ae:	46 c0       	rjmp	.+140    	; 0x13c <system_init>
  b0:	08 95       	ret

000000b2 <main>:
unsigned char second;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  b2:	fd df       	rcall	.-6      	; 0xae <atmel_start_init>
    // Timer/Counter 0 initialization
    // Clock source: System Clock
    // Clock value: Timer 0 Stopped
    // Mode: Normal top=0xFF
    // OC0 output: Disconnected
    ASSR=0x00;
  b4:	10 be       	out	0x30, r1	; 48
	
    //TCCR0=0x04;     // 64분주
	/* Prescale the timer to be clock source/128 to make */
	/* TC0 overflow precisely once every second. */
	TCCR0 = (1 << CS02);	// 64분주
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	83 bf       	out	0x33, r24	; 51
	
    TCNT0=0x07;     // 1ms
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	82 bf       	out	0x32, r24	; 50
    OCR0=0x00;
  be:	11 be       	out	0x31, r1	; 49

	/* Enable Timer/Counter0 Overflow Interrupts */
	TIMSK |= (1 << TOIE0);
  c0:	87 b7       	in	r24, 0x37	; 55
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	87 bf       	out	0x37, r24	; 55

	/* Set the Global Interrupt Enable Bit */
	sei();
  c6:	78 94       	sei
	second = 0;
  c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 *
 * \param[in] pin       The pin number for device
 */
static inline void PORTE_toggle_pin_level(const uint8_t pin)
{
	PINE = 1 << pin;
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	91 b9       	out	0x01, r25	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTE |= 1 << pin;
  d0:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	39 e6       	ldi	r19, 0x69	; 105
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x26>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x30>
  e2:	00 00       	nop
		
		PORTE_toggle_pin_level(2);
		//PORTE = 0xFF;
		PORTE_set_pin_level(2,1);
		_delay_ms(500);
		PORTE ^= 0xff;
  e4:	83 b1       	in	r24, 0x03	; 3
  e6:	80 95       	com	r24
  e8:	83 b9       	out	0x03, r24	; 3
		PORTE ^= 0xff;
  ea:	83 b1       	in	r24, 0x03	; 3
  ec:	80 95       	com	r24
  ee:	83 b9       	out	0x03, r24	; 3
		PORTE ^= 0xff;
  f0:	83 b1       	in	r24, 0x03	; 3
  f2:	80 95       	com	r24
  f4:	83 b9       	out	0x03, r24	; 3
		PORTE ^= 0xff;
  f6:	83 b1       	in	r24, 0x03	; 3
  f8:	80 95       	com	r24
  fa:	83 b9       	out	0x03, r24	; 3
	} else {
		PORTE &= ~(1 << pin);
  fc:	1a 98       	cbi	0x03, 2	; 3
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	39 e6       	ldi	r19, 0x69	; 105
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x52>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x5c>
 10e:	00 00       	nop
 110:	de cf       	rjmp	.-68     	; 0xce <main+0x1c>

00000112 <__vector_16>:
	}
}

/* keep track of time, date, month, and year */
ISR(TIMER0_OVF_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	cli();
 11e:	f8 94       	cli
	second++;
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//PORTE ^= 0xff;
	TCNT0=0x07;     // 1ms
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	82 bf       	out	0x32, r24	; 50
	sei();
 12e:	78 94       	sei
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <system_init>:
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
 13c:	8a b3       	in	r24, 0x1a	; 26
 13e:	1a ba       	out	0x1a, r1	; 26

		PORTA |= mask;
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8b bb       	out	0x1b, r24	; 27
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 146:	97 b3       	in	r25, 0x17	; 23
 148:	17 ba       	out	0x17, r1	; 23

		PORTB |= mask;
 14a:	98 b3       	in	r25, 0x18	; 24
 14c:	88 bb       	out	0x18, r24	; 24
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 14e:	94 b3       	in	r25, 0x14	; 20
 150:	14 ba       	out	0x14, r1	; 20

		PORTC |= mask;
 152:	95 b3       	in	r25, 0x15	; 21
 154:	85 bb       	out	0x15, r24	; 21
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 156:	91 b3       	in	r25, 0x11	; 17
 158:	11 ba       	out	0x11, r1	; 17

		PORTD |= mask;
 15a:	92 b3       	in	r25, 0x12	; 18
 15c:	82 bb       	out	0x12, r24	; 18
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 15e:	92 b1       	in	r25, 0x02	; 2
 160:	12 b8       	out	0x02, r1	; 2

		PORTE |= mask;
 162:	93 b1       	in	r25, 0x03	; 3
 164:	83 b9       	out	0x03, r24	; 3
		break;
	case PORT_DIR_OUT:
		DDRF |= mask;
		break;
	case PORT_DIR_OFF:
		DDRF &= ~mask;
 166:	e1 e6       	ldi	r30, 0x61	; 97
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	10 82       	st	Z, r1

		PORTF |= mask;
 16e:	e2 e6       	ldi	r30, 0x62	; 98
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 81       	ld	r25, Z
 174:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		DDRG |= mask;
		break;
	case PORT_DIR_OFF:
		DDRG &= ~mask;
 176:	e4 e6       	ldi	r30, 0x64	; 100
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 7e       	andi	r24, 0xE0	; 224
 17e:	80 83       	st	Z, r24

		PORTG |= mask;
 180:	e5 e6       	ldi	r30, 0x65	; 101
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8f 61       	ori	r24, 0x1F	; 31
 188:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
 18a:	12 9a       	sbi	0x02, 2	; 2
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTE |= 1 << pin;
	} else {
		PORTE &= ~(1 << pin);
 18c:	1a 98       	cbi	0x03, 2	; 3
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{

	MCUCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 18e:	15 be       	out	0x35, r1	; 53
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
