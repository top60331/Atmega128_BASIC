
TC_TIMEOUT_EXAMPLE11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc6  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ce  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a00  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000118ed  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e1  00000000  00000000  00013e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0001411a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002df  00000000  00000000  0001419a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c0       	rjmp	.+112    	; 0xae <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	be d0       	rcall	.+380    	; 0x226 <main>
  aa:	dc c0       	rjmp	.+440    	; 0x264 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_15>:
	cpu_irq_restore(flags);
}

void tc_timeout_start_singleshot(tc_timeout_id_t id, uint16_t timeout)
{
	tc_timeout_start_offset(id, 0, timeout);
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tc_timeout_active>
  d0:	80 ff       	sbrs	r24, 0
  d2:	18 c0       	rjmp	.+48     	; 0x104 <__vector_15+0x56>
  d4:	e2 e0       	ldi	r30, 0x02	; 2
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	20 81       	ld	r18, Z
  da:	31 81       	ldd	r19, Z+1	; 0x01
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	31 09       	sbc	r19, r1
  e0:	31 83       	std	Z+1, r19	; 0x01
  e2:	20 83       	st	Z, r18
  e4:	23 2b       	or	r18, r19
  e6:	71 f4       	brne	.+28     	; 0x104 <__vector_15+0x56>
  e8:	91 60       	ori	r25, 0x01	; 1
  ea:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tc_timeout_array+0x2>
  ee:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <tc_timeout_array+0x3>
  f2:	21 15       	cp	r18, r1
  f4:	31 05       	cpc	r19, r1
  f6:	11 f4       	brne	.+4      	; 0xfc <__vector_15+0x4e>
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	04 c0       	rjmp	.+8      	; 0x104 <__vector_15+0x56>
  fc:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <tc_timeout_array+0x1>
 100:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <tc_timeout_array>
 104:	81 ff       	sbrs	r24, 1
 106:	18 c0       	rjmp	.+48     	; 0x138 <__vector_15+0x8a>
 108:	e2 e0       	ldi	r30, 0x02	; 2
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	24 81       	ldd	r18, Z+4	; 0x04
 10e:	35 81       	ldd	r19, Z+5	; 0x05
 110:	21 50       	subi	r18, 0x01	; 1
 112:	31 09       	sbc	r19, r1
 114:	35 83       	std	Z+5, r19	; 0x05
 116:	24 83       	std	Z+4, r18	; 0x04
 118:	23 2b       	or	r18, r19
 11a:	71 f4       	brne	.+28     	; 0x138 <__vector_15+0x8a>
 11c:	92 60       	ori	r25, 0x02	; 2
 11e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <tc_timeout_array+0x6>
 122:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <tc_timeout_array+0x7>
 126:	21 15       	cp	r18, r1
 128:	31 05       	cpc	r19, r1
 12a:	29 f0       	breq	.+10     	; 0x136 <__vector_15+0x88>
 12c:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <tc_timeout_array+0x5>
 130:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <tc_timeout_array+0x4>
 134:	01 c0       	rjmp	.+2      	; 0x138 <__vector_15+0x8a>
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tc_timeout_active>
 13c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <tc_timeout_init>:
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	80 bf       	out	0x30, r24	; 48
 15e:	8f e1       	ldi	r24, 0x1F	; 31
 160:	81 bf       	out	0x31, r24	; 49
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	83 bf       	out	0x33, r24	; 51
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	87 bf       	out	0x37, r24	; 55
 16a:	08 95       	ret

0000016c <tc_timeout_start_offset>:
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	9a 01       	movw	r18, r20
 178:	9f b7       	in	r25, 0x3f	; 63
 17a:	99 83       	std	Y+1, r25	; 0x01
 17c:	f8 94       	cli
 17e:	59 81       	ldd	r21, Y+1	; 0x01
 180:	e8 2f       	mov	r30, r24
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	ee 5f       	subi	r30, 0xFE	; 254
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	31 83       	std	Z+1, r19	; 0x01
 192:	20 83       	st	Z, r18
 194:	73 83       	std	Z+3, r23	; 0x03
 196:	62 83       	std	Z+2, r22	; 0x02
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <tc_timeout_start_offset+0x38>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <tc_timeout_start_offset+0x34>
 1a8:	cb 01       	movw	r24, r22
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <tc_timeout_active>
 1ae:	98 2b       	or	r25, r24
 1b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <tc_timeout_active>
 1b4:	80 95       	com	r24
 1b6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	89 23       	and	r24, r25
 1bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c0:	5f bf       	out	0x3f, r21	; 63
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <tc_timeout_start_periodic>:
}

void tc_timeout_start_periodic(tc_timeout_id_t id, uint16_t period)
{
	tc_timeout_start_offset(id, period, period);
 1ca:	ab 01       	movw	r20, r22
 1cc:	cf cf       	rjmp	.-98     	; 0x16c <tc_timeout_start_offset>
 1ce:	08 95       	ret

000001d0 <tc_timeout_test_and_clear_expired>:
}

bool tc_timeout_test_and_clear_expired(tc_timeout_id_t id)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	1f 92       	push	r1
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags;

	if (tc_timeout_expired & (1 << id)) {
 1da:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	08 2e       	mov	r0, r24
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <tc_timeout_test_and_clear_expired+0x18>
 1e4:	35 95       	asr	r19
 1e6:	27 95       	ror	r18
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <tc_timeout_test_and_clear_expired+0x14>
 1ec:	20 ff       	sbrs	r18, 0
 1ee:	16 c0       	rjmp	.+44     	; 0x21c <tc_timeout_test_and_clear_expired+0x4c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 1f0:	9f b7       	in	r25, 0x3f	; 63
 1f2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 1f4:	f8 94       	cli
	return flags;
 1f6:	49 81       	ldd	r20, Y+1	; 0x01
		// Clear expired flag safely if it's set
		flags = cpu_irq_save();
		tc_timeout_expired &= ~(1 << id);
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	b9 01       	movw	r22, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <tc_timeout_test_and_clear_expired+0x34>
 200:	66 0f       	add	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	8a 95       	dec	r24
 206:	e2 f7       	brpl	.-8      	; 0x200 <tc_timeout_test_and_clear_expired+0x30>
 208:	cb 01       	movw	r24, r22
 20a:	80 95       	com	r24
 20c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	89 23       	and	r24, r25
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 216:	4f bf       	out	0x3f, r20	; 63
		cpu_irq_restore(flags);
		return true;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	01 c0       	rjmp	.+2      	; 0x21e <tc_timeout_test_and_clear_expired+0x4e>
	}

	return false;
 21c:	80 e0       	ldi	r24, 0x00	; 0
}
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <main>:
}

int main(void)
{
	// Set LED0 and LED1 connected to port D to outputs
	DDRD |= LED0_MASK | LED1_MASK;
 226:	81 b3       	in	r24, 0x11	; 17
 228:	83 60       	ori	r24, 0x03	; 3
 22a:	81 bb       	out	0x11, r24	; 17

	// Initialize the timeout internals before using it
	tc_timeout_init();
 22c:	96 df       	rcall	.-212    	; 0x15a <tc_timeout_init>

	// Enable global interrupts
	sei();
 22e:	78 94       	sei

	/*
	 * Start the two timeouts. One at 1 second interval and the other at
	 * 1/3 second interval.
	 */
	tc_timeout_start_periodic(EXAMPLE_TIMEOUT_SLOW, TC_TIMEOUT_TICK_HZ);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	74 e0       	ldi	r23, 0x04	; 4
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	c9 df       	rcall	.-110    	; 0x1ca <tc_timeout_start_periodic>
	tc_timeout_start_periodic(EXAMPLE_TIMEOUT_FAST, TC_TIMEOUT_TICK_HZ / 3);
 238:	65 e5       	ldi	r22, 0x55	; 85
 23a:	71 e0       	ldi	r23, 0x01	; 1
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	c5 df       	rcall	.-118    	; 0x1ca <tc_timeout_start_periodic>
		|| defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
	/*
	 * For older megaAVR devices read-modify-write PORT register.
	 * This isn't safe for interrupts.
	 */
	PORTD ^= mask;
 240:	d1 e0       	ldi	r29, 0x01	; 1
 242:	cd 2f       	mov	r28, r29
	tc_timeout_start_periodic(EXAMPLE_TIMEOUT_SLOW, TC_TIMEOUT_TICK_HZ);
	tc_timeout_start_periodic(EXAMPLE_TIMEOUT_FAST, TC_TIMEOUT_TICK_HZ / 3);

	while (1) {
		// Loop and test for each expire and toggle LED
		if (tc_timeout_test_and_clear_expired(EXAMPLE_TIMEOUT_SLOW)) {
 244:	12 e0       	ldi	r17, 0x02	; 2
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	c3 df       	rcall	.-122    	; 0x1d0 <tc_timeout_test_and_clear_expired>
 24a:	88 23       	and	r24, r24
 24c:	19 f0       	breq	.+6      	; 0x254 <main+0x2e>
		|| defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
	/*
	 * For older megaAVR devices read-modify-write PORT register.
	 * This isn't safe for interrupts.
	 */
	PORTD ^= mask;
 24e:	82 b3       	in	r24, 0x12	; 18
 250:	8d 27       	eor	r24, r29
	while (1) {
		// Loop and test for each expire and toggle LED
		if (tc_timeout_test_and_clear_expired(EXAMPLE_TIMEOUT_SLOW)) {
			toggle_led(LED0_MASK);
		}
		if (tc_timeout_test_and_clear_expired(EXAMPLE_TIMEOUT_FAST)) {
 252:	82 bb       	out	0x12, r24	; 18
 254:	8c 2f       	mov	r24, r28
 256:	bc df       	rcall	.-136    	; 0x1d0 <tc_timeout_test_and_clear_expired>
 258:	88 23       	and	r24, r24
 25a:	a9 f3       	breq	.-22     	; 0x246 <main+0x20>
		|| defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
	/*
	 * For older megaAVR devices read-modify-write PORT register.
	 * This isn't safe for interrupts.
	 */
	PORTD ^= mask;
 25c:	82 b3       	in	r24, 0x12	; 18
 25e:	81 27       	eor	r24, r17
 260:	82 bb       	out	0x12, r24	; 18
 262:	f1 cf       	rjmp	.-30     	; 0x246 <main+0x20>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
