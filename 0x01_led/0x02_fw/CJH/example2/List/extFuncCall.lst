
AVRASM ver. 2.1.30  F:\0x02_study\AVR\Atmega128_BASIC\0x01_led\0x02_fw\CJH\example2\List\extFuncCall.asm Fri Nov 06 07:47:05 2020

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0046 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0067 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 __RESET:
000046 94f8      	CLI
000047 27ee      	CLR  R30
000048 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000049 e0f1      	LDI  R31,1
00004a bff5      	OUT  MCUCR,R31
00004b bfe5      	OUT  MCUCR,R30
00004c 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00004e e1f8      	LDI  R31,0x18
00004f bdf1      	OUT  WDTCR,R31
000050 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000051 e08d      	LDI  R24,(14-2)+1
000052 e0a2      	LDI  R26,2
000053 27bb      	CLR  R27
                 __CLEAR_REG:
000054 93ed      	ST   X+,R30
000055 958a      	DEC  R24
000056 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000057 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000058 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000059 e0a0      	LDI  R26,LOW(__SRAM_START)
00005a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
00005e bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 0068 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;?Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 2020-11-05
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "board_init.h"
                 ;#include "bitControlPort.h"
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 001F {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; 0000 0020 // Place your code here
                 ; 0000 0021 
                 ; 0000 0022 }
000067 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0027 {
                 _main:
                 ; 0000 0028 // Declare your local variables here
                 ; 0000 0029 
                 ; 0000 002A systemInit();
000068 d013      	RCALL _systemInit
                 ; 0000 002B 
                 ; 0000 002C // Global enable interrupts
                 ; 0000 002D #asm("sei")
000069 9478      	sei
                 ; 0000 002E 
                 ; 0000 002F while (1)
                 _0x3:
                 ; 0000 0030       {
                 ; 0000 0031       // Place your code here
                 ; 0000 0032       #if (1)
                 ; 0000 0033       bitControlPortA (2, SET);
00006a e0e2      	LDI  R30,LOW(2)
00006b e0f0      	LDI  R31,HIGH(2)
00006c 93fa      	ST   -Y,R31
00006d 93ea      	ST   -Y,R30
00006e e0e1      	LDI  R30,LOW(1)
00006f e0f0      	LDI  R31,HIGH(1)
000070 940e 00e8 	CALL SUBOPT_0x0
                 ; 0000 0034       delay_ms(1000);
                 ; 0000 0035       bitControlPortA (2, CLR);
000072 e0e2      	LDI  R30,LOW(2)
000073 e0f0      	LDI  R31,HIGH(2)
000074 93fa      	ST   -Y,R31
000075 93ea      	ST   -Y,R30
000076 e0e0      	LDI  R30,LOW(0)
000077 e0f0      	LDI  R31,HIGH(0)
000078 940e 00e8 	CALL SUBOPT_0x0
                 ; 0000 0036       delay_ms(1000);
                 ; 0000 0037       #endif
                 ; 0000 0038       }
00007a cfef      	RJMP _0x3
                 ; 0000 0039 }
                 _0x6:
00007b cfff      	RJMP _0x6
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void systemInit(void)
                 ; 0001 0004 {
                 
                 	.CSEG
                 _systemInit:
                 ; 0001 0005 // Input/Output Ports initialization
                 ; 0001 0006 // Port A initialization
                 ; 0001 0007 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0001 0008 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0001 0009 PORTA=0x00;
00007c e0e0      	LDI  R30,LOW(0)
00007d bbeb      	OUT  0x1B,R30
                 ; 0001 000A DDRA=0xFF;
00007e efef      	LDI  R30,LOW(255)
00007f bbea      	OUT  0x1A,R30
                 ; 0001 000B 
                 ; 0001 000C // Port B initialization
                 ; 0001 000D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 000E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 000F PORTB=0x00;
000080 e0e0      	LDI  R30,LOW(0)
000081 bbe8      	OUT  0x18,R30
                 ; 0001 0010 DDRB=0x00;
000082 bbe7      	OUT  0x17,R30
                 ; 0001 0011 
                 ; 0001 0012 // Port C initialization
                 ; 0001 0013 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0014 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0015 PORTC=0x00;
000083 bbe5      	OUT  0x15,R30
                 ; 0001 0016 DDRC=0x00;
000084 bbe4      	OUT  0x14,R30
                 ; 0001 0017 
                 ; 0001 0018 // Port D initialization
                 ; 0001 0019 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 001A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 001B PORTD=0x00;
000085 bbe2      	OUT  0x12,R30
                 ; 0001 001C DDRD=0x00;
000086 bbe1      	OUT  0x11,R30
                 ; 0001 001D 
                 ; 0001 001E // Port E initialization
                 ; 0001 001F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0020 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0021 PORTE=0x00;
000087 b9e3      	OUT  0x3,R30
                 ; 0001 0022 DDRE=0x00;
000088 b9e2      	OUT  0x2,R30
                 ; 0001 0023 
                 ; 0001 0024 // Port F initialization
                 ; 0001 0025 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0026 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0027 PORTF=0x00;
000089 93e0 0062 	STS  98,R30
                 ; 0001 0028 DDRF=0x00;
00008b 93e0 0061 	STS  97,R30
                 ; 0001 0029 
                 ; 0001 002A // Port G initialization
                 ; 0001 002B // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 002C // State4=T State3=T State2=T State1=T State0=T
                 ; 0001 002D PORTG=0x00;
00008d 93e0 0065 	STS  101,R30
                 ; 0001 002E DDRG=0x00;
00008f 93e0 0064 	STS  100,R30
                 ; 0001 002F 
                 ; 0001 0030 // Timer/Counter 0 initialization
                 ; 0001 0031 // Clock source: System Clock
                 ; 0001 0032 // Clock value: Timer 0 Stopped
                 ; 0001 0033 // Mode: Normal top=0xFF
                 ; 0001 0034 // OC0 output: Disconnected
                 ; 0001 0035 ASSR=0x00;
000091 bfe0      	OUT  0x30,R30
                 ; 0001 0036 TCCR0=0x00;
000092 bfe3      	OUT  0x33,R30
                 ; 0001 0037 TCNT0=0x00;
000093 bfe2      	OUT  0x32,R30
                 ; 0001 0038 OCR0=0x00;
000094 bfe1      	OUT  0x31,R30
                 ; 0001 0039 
                 ; 0001 003A // Timer/Counter 1 initialization
                 ; 0001 003B // Clock source: System Clock
                 ; 0001 003C // Clock value: Timer1 Stopped
                 ; 0001 003D // Mode: Normal top=0xFFFF
                 ; 0001 003E // OC1A output: Discon.
                 ; 0001 003F // OC1B output: Discon.
                 ; 0001 0040 // OC1C output: Discon.
                 ; 0001 0041 // Noise Canceler: Off
                 ; 0001 0042 // Input Capture on Falling Edge
                 ; 0001 0043 // Timer1 Overflow Interrupt: Off
                 ; 0001 0044 // Input Capture Interrupt: Off
                 ; 0001 0045 // Compare A Match Interrupt: Off
                 ; 0001 0046 // Compare B Match Interrupt: Off
                 ; 0001 0047 // Compare C Match Interrupt: Off
                 ; 0001 0048 TCCR1A=0x00;
000095 bdef      	OUT  0x2F,R30
                 ; 0001 0049 TCCR1B=0x00;
000096 bdee      	OUT  0x2E,R30
                 ; 0001 004A TCNT1H=0x00;
000097 bded      	OUT  0x2D,R30
                 ; 0001 004B TCNT1L=0x00;
000098 bdec      	OUT  0x2C,R30
                 ; 0001 004C ICR1H=0x00;
000099 bde7      	OUT  0x27,R30
                 ; 0001 004D ICR1L=0x00;
00009a bde6      	OUT  0x26,R30
                 ; 0001 004E OCR1AH=0x00;
00009b bdeb      	OUT  0x2B,R30
                 ; 0001 004F OCR1AL=0x00;
00009c bdea      	OUT  0x2A,R30
                 ; 0001 0050 OCR1BH=0x00;
00009d bde9      	OUT  0x29,R30
                 ; 0001 0051 OCR1BL=0x00;
00009e bde8      	OUT  0x28,R30
                 ; 0001 0052 OCR1CH=0x00;
00009f 93e0 0079 	STS  121,R30
                 ; 0001 0053 OCR1CL=0x00;
0000a1 93e0 0078 	STS  120,R30
                 ; 0001 0054 
                 ; 0001 0055 // Timer/Counter 2 initialization
                 ; 0001 0056 // Clock source: System Clock
                 ; 0001 0057 // Clock value: Timer2 Stopped
                 ; 0001 0058 // Mode: Normal top=0xFF
                 ; 0001 0059 // OC2 output: Disconnected
                 ; 0001 005A TCCR2=0x00;
0000a3 bde5      	OUT  0x25,R30
                 ; 0001 005B TCNT2=0x00;
0000a4 bde4      	OUT  0x24,R30
                 ; 0001 005C OCR2=0x00;
0000a5 bde3      	OUT  0x23,R30
                 ; 0001 005D 
                 ; 0001 005E // Timer/Counter 3 initialization
                 ; 0001 005F // Clock source: System Clock
                 ; 0001 0060 // Clock value: Timer3 Stopped
                 ; 0001 0061 // Mode: Normal top=0xFFFF
                 ; 0001 0062 // OC3A output: Discon.
                 ; 0001 0063 // OC3B output: Discon.
                 ; 0001 0064 // OC3C output: Discon.
                 ; 0001 0065 // Noise Canceler: Off
                 ; 0001 0066 // Input Capture on Falling Edge
                 ; 0001 0067 // Timer3 Overflow Interrupt: Off
                 ; 0001 0068 // Input Capture Interrupt: Off
                 ; 0001 0069 // Compare A Match Interrupt: Off
                 ; 0001 006A // Compare B Match Interrupt: Off
                 ; 0001 006B // Compare C Match Interrupt: Off
                 ; 0001 006C TCCR3A=0x00;
0000a6 93e0 008b 	STS  139,R30
                 ; 0001 006D TCCR3B=0x00;
0000a8 93e0 008a 	STS  138,R30
                 ; 0001 006E TCNT3H=0x00;
0000aa 93e0 0089 	STS  137,R30
                 ; 0001 006F TCNT3L=0x00;
0000ac 93e0 0088 	STS  136,R30
                 ; 0001 0070 ICR3H=0x00;
0000ae 93e0 0081 	STS  129,R30
                 ; 0001 0071 ICR3L=0x00;
0000b0 93e0 0080 	STS  128,R30
                 ; 0001 0072 OCR3AH=0x00;
0000b2 93e0 0087 	STS  135,R30
                 ; 0001 0073 OCR3AL=0x00;
0000b4 93e0 0086 	STS  134,R30
                 ; 0001 0074 OCR3BH=0x00;
0000b6 93e0 0085 	STS  133,R30
                 ; 0001 0075 OCR3BL=0x00;
0000b8 93e0 0084 	STS  132,R30
                 ; 0001 0076 OCR3CH=0x00;
0000ba 93e0 0083 	STS  131,R30
                 ; 0001 0077 OCR3CL=0x00;
0000bc 93e0 0082 	STS  130,R30
                 ; 0001 0078 
                 ; 0001 0079 // External Interrupt(s) initialization
                 ; 0001 007A // INT0: Off
                 ; 0001 007B // INT1: Off
                 ; 0001 007C // INT2: Off
                 ; 0001 007D // INT3: Off
                 ; 0001 007E // INT4: Off
                 ; 0001 007F // INT5: Off
                 ; 0001 0080 // INT6: Off
                 ; 0001 0081 // INT7: Off
                 ; 0001 0082 EICRA=0x00;
0000be 93e0 006a 	STS  106,R30
                 ; 0001 0083 EICRB=0x00;
0000c0 bfea      	OUT  0x3A,R30
                 ; 0001 0084 EIMSK=0x00;
0000c1 bfe9      	OUT  0x39,R30
                 ; 0001 0085 
                 ; 0001 0086 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0087 TIMSK=0x01;
0000c2 e0e1      	LDI  R30,LOW(1)
0000c3 bfe7      	OUT  0x37,R30
                 ; 0001 0088 
                 ; 0001 0089 ETIMSK=0x00;
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 93e0 007d 	STS  125,R30
                 ; 0001 008A 
                 ; 0001 008B // USART0 initialization
                 ; 0001 008C // USART0 disabled
                 ; 0001 008D UCSR0B=0x00;
0000c7 b9ea      	OUT  0xA,R30
                 ; 0001 008E 
                 ; 0001 008F // USART1 initialization
                 ; 0001 0090 // USART1 disabled
                 ; 0001 0091 UCSR1B=0x00;
0000c8 93e0 009a 	STS  154,R30
                 ; 0001 0092 
                 ; 0001 0093 // Analog Comparator initialization
                 ; 0001 0094 // Analog Comparator: Off
                 ; 0001 0095 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0096 ACSR=0x80;
0000ca e8e0      	LDI  R30,LOW(128)
0000cb b9e8      	OUT  0x8,R30
                 ; 0001 0097 SFIOR=0x00;
0000cc e0e0      	LDI  R30,LOW(0)
0000cd bde0      	OUT  0x20,R30
                 ; 0001 0098 
                 ; 0001 0099 // ADC initialization
                 ; 0001 009A // ADC disabled
                 ; 0001 009B ADCSRA=0x00;
0000ce b9e6      	OUT  0x6,R30
                 ; 0001 009C 
                 ; 0001 009D // SPI initialization
                 ; 0001 009E // SPI disabled
                 ; 0001 009F SPCR=0x00;
0000cf b9ed      	OUT  0xD,R30
                 ; 0001 00A0 
                 ; 0001 00A1 // TWI initialization
                 ; 0001 00A2 // TWI disabled
                 ; 0001 00A3 TWCR=0x00;
0000d0 93e0 0074 	STS  116,R30
                 ; 0001 00A4 
                 ; 0001 00A5 }
0000d2 9508      	RET
                 ;// portA control
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "bitControlPort.h"
                 ;
                 ;void bitControlPortA (WORD pin, WORD setClear)
                 ; 0002 0008 {
                 
                 	.CSEG
                 _bitControlPortA:
                 ; 0002 0009     if (setClear == SET)
                 ;	pin -> Y+2
                 ;	setClear -> Y+0
0000d3 81a8      	LD   R26,Y
0000d4 81b9      	LDD  R27,Y+1
0000d5 9711      	SBIW R26,1
0000d6 f439      	BRNE _0x40003
                 ; 0002 000A     {
                 ; 0002 000B         BIT_SET(PORTA, pin);
0000d7 b21b      	IN   R1,27
0000d8 81ea      	LDD  R30,Y+2
0000d9 e0a1      	LDI  R26,LOW(1)
0000da 940e 00fd 	CALL __LSLB12
0000dc 29e1      	OR   R30,R1
0000dd c007      	RJMP _0x40005
                 ; 0002 000C     }
                 ; 0002 000D     else
                 _0x40003:
                 ; 0002 000E     {
                 ; 0002 000F         BIT_CLEAR(PORTA, pin);
0000de b21b      	IN   R1,27
0000df 81ea      	LDD  R30,Y+2
0000e0 e0a1      	LDI  R26,LOW(1)
0000e1 940e 00fd 	CALL __LSLB12
0000e3 95e0      	COM  R30
0000e4 21e1      	AND  R30,R1
                 _0x40005:
0000e5 bbeb      	OUT  0x1B,R30
                 ; 0002 0010     }
                 ; 0002 0011 
                 ; 0002 0012 }
0000e6 9624      	ADIW R28,4
0000e7 9508      	RET
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0000e8 93fa      	ST   -Y,R31
0000e9 93ea      	ST   -Y,R30
0000ea dfe8      	RCALL _bitControlPortA
0000eb eee8      	LDI  R30,LOW(1000)
0000ec e0f3      	LDI  R31,HIGH(1000)
0000ed 93fa      	ST   -Y,R31
0000ee 93ea      	ST   -Y,R30
0000ef 940c 00f1 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0000f1 91e9      	ld   r30,y+
0000f2 91f9      	ld   r31,y+
0000f3 9630      	adiw r30,0
0000f4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0000f5 ea80     +LDI R24 , LOW ( 0xFA0 )
0000f6 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0000f7 9701     +SBIW R24 , 1
0000f8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0000f9 95a8      	wdr
0000fa 9731      	sbiw r30,1
0000fb f7c9      	brne __delay_ms0
                 __delay_ms1:
0000fc 9508      	ret
                 
                 __LSLB12:
0000fd 23ee      	TST  R30
0000fe 2e0e      	MOV  R0,R30
0000ff 2fea      	MOV  R30,R26
000100 f019      	BREQ __LSLB12R
                 __LSLB12L:
000101 0fee      	LSL  R30
000102 940a      	DEC  R0
000103 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000104 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   2 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   7 r25:   2 r26:   7 r27:   3 r28:   2 r29:   1 r30:  97 r31:  14 
x  :   2 y  :  14 z  :   0 
Registers used: 12 out of 35 (34.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   1 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   4 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   0 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   2 inc   :   0 jmp   :  37 ld    :   3 ldd   :   3 
ldi   :  33 lds   :   0 lpm   :   0 lsl   :   1 lsr   :   0 mov   :   2 
movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   1 ori   :   0 out   :  44 pop   :   0 push  :   0 rcall :   2 
ret   :   4 reti  :   1 rjmp  :   3 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  10 std   :   0 sts   :  23 sub   :   0 subi  :   0 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 28 out of 117 (23.9%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00020a    522      0    522  131072   0.4%
[.dseg] 0x000100 0x000500      0      0      0    4351   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
