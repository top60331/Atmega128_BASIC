;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2021-01-26
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 004C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004D char status,data;
; 0000 004E status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004F data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0050 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0051    {
; 0000 0052    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0053 #if RX_BUFFER_SIZE0 == 256
; 0000 0054    // special case for receiver buffer size=256
; 0000 0055    if (++rx_counter0 == 0)
; 0000 0056       {
; 0000 0057 #else
; 0000 0058    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0059    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005A       {
; 0000 005B       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 005C #endif
; 0000 005D       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 005E       }
; 0000 005F    }
;PCODE: $0000002A VOL: 0
; 0000 0060 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0067 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0068 char data;
; 0000 0069 while (rx_counter0==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006A data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006B #if RX_BUFFER_SIZE0 != 256
; 0000 006C if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006D #endif
; 0000 006E #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 006F --rx_counter0;
;PCODE: $00000044 VOL: 0
; 0000 0070 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0071 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0072 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 007B {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007C // Place your code here
; 0000 007D 
; 0000 007E }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0083 {
;PCODE: $00000050 VOL: 0
; 0000 0084 // Declare your local variables here
; 0000 0085 
; 0000 0086 // Input/Output Ports initialization
; 0000 0087 // Port A initialization
; 0000 0088 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0089 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 008A PORTA=0x00;  // LED0~LED7
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008B DDRA=0xFF;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 008C 
; 0000 008D // Port B initialization
; 0000 008E // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 008F // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 0090 PORTB=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0091 DDRB=0x10;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0092 
; 0000 0093 // Port C initialization
; 0000 0094 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0095 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0096 PORTC=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0097 DDRC=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0098 
; 0000 0099 // Port D initialization
; 0000 009A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009C PORTD=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009D DDRD=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 009E 
; 0000 009F // Port E initialization
; 0000 00A0 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A1 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A2 PORTE=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00A3 DDRE=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00A4 
; 0000 00A5 // Port F initialization
; 0000 00A6 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A7 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A8 PORTF=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A9 DDRF=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00AA 
; 0000 00AB // Port G initialization
; 0000 00AC // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00AD // State4=T State3=T State2=T State1=T State0=T
; 0000 00AE PORTG=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00AF DDRG=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00B0 
; 0000 00B1 // Timer/Counter 0 initialization
; 0000 00B2 // Clock source: System Clock
; 0000 00B3 // Clock value: Timer 0 Stopped
; 0000 00B4 // Mode: Normal top=0xFF
; 0000 00B5 // OC0 output: Disconnected
; 0000 00B6 ASSR=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00B7 TCCR0=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00B8 TCNT0=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00B9 OCR0=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00BA 
; 0000 00BB // Timer/Counter 1 initialization
; 0000 00BC // Clock source: System Clock
; 0000 00BD // Clock value: Timer1 Stopped
; 0000 00BE // Mode: Normal top=0xFFFF
; 0000 00BF // OC1A output: Discon.
; 0000 00C0 // OC1B output: Discon.
; 0000 00C1 // OC1C output: Discon.
; 0000 00C2 // Noise Canceler: Off
; 0000 00C3 // Input Capture on Falling Edge
; 0000 00C4 // Timer1 Overflow Interrupt: Off
; 0000 00C5 // Input Capture Interrupt: Off
; 0000 00C6 // Compare A Match Interrupt: Off
; 0000 00C7 // Compare B Match Interrupt: Off
; 0000 00C8 // Compare C Match Interrupt: Off
; 0000 00C9 TCCR1A=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00CA TCCR1B=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00CB TCNT1H=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00CC TCNT1L=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00CD ICR1H=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00CE ICR1L=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00CF OCR1AH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00D0 OCR1AL=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00D1 OCR1BH=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00D2 OCR1BL=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00D3 OCR1CH=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00D4 OCR1CL=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00D5 
; 0000 00D6 // Timer/Counter 2 initialization
; 0000 00D7 // Clock source: System Clock
; 0000 00D8 // Clock value: Timer2 Stopped
; 0000 00D9 // Mode: Normal top=0xFF
; 0000 00DA // OC2 output: Disconnected
; 0000 00DB TCCR2=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00DC TCNT2=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00DD OCR2=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00DE 
; 0000 00DF // Timer/Counter 3 initialization
; 0000 00E0 // Clock source: System Clock
; 0000 00E1 // Clock value: Timer3 Stopped
; 0000 00E2 // Mode: Normal top=0xFFFF
; 0000 00E3 // OC3A output: Discon.
; 0000 00E4 // OC3B output: Discon.
; 0000 00E5 // OC3C output: Discon.
; 0000 00E6 // Noise Canceler: Off
; 0000 00E7 // Input Capture on Falling Edge
; 0000 00E8 // Timer3 Overflow Interrupt: Off
; 0000 00E9 // Input Capture Interrupt: Off
; 0000 00EA // Compare A Match Interrupt: Off
; 0000 00EB // Compare B Match Interrupt: Off
; 0000 00EC // Compare C Match Interrupt: Off
; 0000 00ED TCCR3A=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00EE TCCR3B=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00EF TCNT3H=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00F0 TCNT3L=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00F1 ICR3H=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00F2 ICR3L=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00F3 OCR3AH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00F4 OCR3AL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00F5 OCR3BH=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00F6 OCR3BL=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00F7 OCR3CH=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00F8 OCR3CL=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00F9 
; 0000 00FA // External Interrupt(s) initialization
; 0000 00FB // INT0: Off
; 0000 00FC // INT1: Off
; 0000 00FD // INT2: Off
; 0000 00FE // INT3: Off
; 0000 00FF // INT4: Off
; 0000 0100 // INT5: Off
; 0000 0101 // INT6: Off
; 0000 0102 // INT7: Off
; 0000 0103 EICRA=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0104 EICRB=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0105 EIMSK=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0106 
; 0000 0107 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0108 TIMSK=0x01;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0109 
; 0000 010A ETIMSK=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 010B 
; 0000 010C // USART0 initialization
; 0000 010D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 010E // USART0 Receiver: On
; 0000 010F // USART0 Transmitter: On
; 0000 0110 // USART0 Mode: Asynchronous
; 0000 0111 // USART0 Baud Rate: 9600
; 0000 0112 UCSR0A=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0113 UCSR0B=0x98;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0114 UCSR0C=0x06;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0115 UBRR0H=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0116 UBRR0L=0x67;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0117 
; 0000 0118 // USART1 initialization
; 0000 0119 // USART1 disabled
; 0000 011A UCSR1B=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 011B 
; 0000 011C // Analog Comparator initialization
; 0000 011D // Analog Comparator: Off
; 0000 011E // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 011F ACSR=0x80;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0120 SFIOR=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0121 
; 0000 0122 // ADC initialization
; 0000 0123 // ADC disabled
; 0000 0124 ADCSRA=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0125 
; 0000 0126 // SPI initialization
; 0000 0127 // SPI disabled
; 0000 0128 SPCR=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0129 
; 0000 012A // TWI initialization
; 0000 012B // TWI disabled
; 0000 012C TWCR=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 012D 
; 0000 012E // Global enable interrupts
; 0000 012F #asm("sei")
;PCODE: $000000CB VOL: 0
	sei
;PCODE: $000000CC VOL: 0
; 0000 0130 
; 0000 0131 while (1)
;PCODE: $000000CD VOL: 0
; 0000 0132       {
; 0000 0133       // Place your code here
; 0000 0134       PORTA = 0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0135       delay_ms(1000);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0136       PORTA = 0xFF;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0137       delay_ms(1000);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0138       }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0139 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
