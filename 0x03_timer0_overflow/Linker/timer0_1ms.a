;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2020-10-18
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;typedef unsigned char BYTE;
;typedef unsigned int  WORD;
;
;#define SET             1
;#define CLR             0
;
;#define BIT_SET(reg, n)     (reg |= (0x01 << n))
;#define BIT_CLEAR(reg, n)     (reg &= ~(0x01 << n))
;#define BIT_TEST(reg, n)     ((reg >> n) & 0x01)
;#define BIT_TOG(reg, n)     (reg ^= (0x01 << n))
;#define _BV(bit) (1 << (bit))   //PORTA |= _BV(2);
;#define nop()                 asm volatile("nop"::)   // 1clock (625nSec)  ex) nop x 16 = 1uSec.
;
;#define FAN1_PORT PORTA
;#define FAN2_PORT PORTA
;#define STATUS_PORT PORTA
;
;#define FAN1_PIN 7
;#define FAN2_PIN 6
;#define STATUS_LED 0
;
;#define FAN1_OFF()   BIT_CLEAR(FAN1_PORT, FAN1_PIN)
;#define FAN2_OFF()   BIT_CLEAR(FAN2_PORT, FAN2_PIN)
;
;#define FAN1_ON()   BIT_SET(FAN1_PORT, FAN1_PIN)
;#define FAN2_ON()   BIT_SET(FAN2_PORT, FAN2_PIN)
;#define _1msec  1000
;#define MIN5    300
;#define MIN10   600
;
;volatile WORD total_overflow_count;     //
;volatile WORD min5_count = 0;           // 300sec
;volatile WORD min10_count = 0;          // 600sec
;volatile BYTE key_scan_cnt = 0;
;volatile BYTE newKeyCheck = 0;
;//volatile BYTE flagSW = 0;
;volatile BYTE min5_completed = 0;
;volatile BYTE min10_completed = 0;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0045 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0046 // Place your code here
; 0000 0047    #asm("cli")
;PCODE: $0000000F VOL: 0
	cli
;PCODE: $00000010 VOL: 0
; 0000 0048     if ( ++key_scan_cnt >= 20 && newKeyCheck == CLR)
;PCODE: $00000011 VOL: 1
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 1
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 1
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0049     {
; 0000 004A         key_scan_cnt = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 1
; 0000 004B         if ( (PINE & 0x10 ) == 0x00)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004C         {
; 0000 004D             newKeyCheck = SET;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 1
; 0000 004E         }
; 0000 004F     }
;PCODE: $00000024 VOL: 0
; 0000 0050     total_overflow_count++;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 1
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0051     TCNT0 = 7;       // 16Mhz / 64 = 4us
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0052     // 1ms / 4us -1 = 249   ===> 256 - 249 = 7
; 0000 0053     #asm("sei")
;PCODE: $0000002C VOL: 0
	sei
;PCODE: $0000002D VOL: 0
; 0000 0054 }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0059 {
;PCODE: $00000031 VOL: 0
; 0000 005A // Declare your local variables here
; 0000 005B 
; 0000 005C // Input/Output Ports initialization
; 0000 005D // Port A initialization
; 0000 005E // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 005F // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0060 PORTA=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0061 DDRA=0xFF;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0062 
; 0000 0063 // Port B initialization
; 0000 0064 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0065 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0066 PORTB=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0067 DDRB=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0068 
; 0000 0069 // Port C initialization
; 0000 006A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006C PORTC=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 006D DDRC=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 006E 
; 0000 006F // Port D initialization
; 0000 0070 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0071 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0072 PORTD=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0073 DDRD=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0074 
; 0000 0075 // Port E initialization
; 0000 0076 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0077 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0078 PORTE=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0079 DDRE=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007A 
; 0000 007B // Port F initialization
; 0000 007C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007E PORTF=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 007F DDRF=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0080 
; 0000 0081 // Port G initialization
; 0000 0082 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0083 // State4=T State3=T State2=T State1=T State0=T
; 0000 0084 PORTG=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0085 DDRG=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0086 
; 0000 0087 // Timer/Counter 0 initialization
; 0000 0088 // Clock source: System Clock
; 0000 0089 // Clock value: Timer 0 Stopped
; 0000 008A // Mode: Normal top=0xFF
; 0000 008B // OC0 output: Disconnected
; 0000 008C ASSR=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 008D TCCR0=0x04;     // 64∫–¡÷
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008E TCNT0=0x07;     // 1ms
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008F OCR0=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0090 
; 0000 0091 // Timer/Counter 1 initialization
; 0000 0092 // Clock source: System Clock
; 0000 0093 // Clock value: Timer1 Stopped
; 0000 0094 // Mode: Normal top=0xFFFF
; 0000 0095 // OC1A output: Discon.
; 0000 0096 // OC1B output: Discon.
; 0000 0097 // OC1C output: Discon.
; 0000 0098 // Noise Canceler: Off
; 0000 0099 // Input Capture on Falling Edge
; 0000 009A // Timer1 Overflow Interrupt: Off
; 0000 009B // Input Capture Interrupt: Off
; 0000 009C // Compare A Match Interrupt: Off
; 0000 009D // Compare B Match Interrupt: Off
; 0000 009E // Compare C Match Interrupt: Off
; 0000 009F TCCR1A=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00A0 TCCR1B=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00A1 TCNT1H=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00A2 TCNT1L=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00A3 ICR1H=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00A4 ICR1L=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00A5 OCR1AH=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00A6 OCR1AL=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00A7 OCR1BH=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00A8 OCR1BL=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00A9 OCR1CH=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00AA OCR1CL=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00AB 
; 0000 00AC // Timer/Counter 2 initialization
; 0000 00AD // Clock source: System Clock
; 0000 00AE // Clock value: Timer2 Stopped
; 0000 00AF // Mode: Normal top=0xFF
; 0000 00B0 // OC2 output: Disconnected
; 0000 00B1 TCCR2=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00B2 TCNT2=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00B3 OCR2=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00B4 
; 0000 00B5 // Timer/Counter 3 initialization
; 0000 00B6 // Clock source: System Clock
; 0000 00B7 // Clock value: Timer3 Stopped
; 0000 00B8 // Mode: Normal top=0xFFFF
; 0000 00B9 // OC3A output: Discon.
; 0000 00BA // OC3B output: Discon.
; 0000 00BB // OC3C output: Discon.
; 0000 00BC // Noise Canceler: Off
; 0000 00BD // Input Capture on Falling Edge
; 0000 00BE // Timer3 Overflow Interrupt: Off
; 0000 00BF // Input Capture Interrupt: Off
; 0000 00C0 // Compare A Match Interrupt: Off
; 0000 00C1 // Compare B Match Interrupt: Off
; 0000 00C2 // Compare C Match Interrupt: Off
; 0000 00C3 TCCR3A=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00C4 TCCR3B=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00C5 TCNT3H=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00C6 TCNT3L=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00C7 ICR3H=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C8 ICR3L=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C9 OCR3AH=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00CA OCR3AL=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00CB OCR3BH=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00CC OCR3BL=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00CD OCR3CH=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00CE OCR3CL=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CF 
; 0000 00D0 // External Interrupt(s) initialization
; 0000 00D1 // INT0: Off
; 0000 00D2 // INT1: Off
; 0000 00D3 // INT2: Off
; 0000 00D4 // INT3: Off
; 0000 00D5 // INT4: Off
; 0000 00D6 // INT5: Off
; 0000 00D7 // INT6: Off
; 0000 00D8 // INT7: Off
; 0000 00D9 EICRA=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00DA EICRB=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00DB EIMSK=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00DC 
; 0000 00DD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00DE TIMSK=0x01;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00DF 
; 0000 00E0 ETIMSK=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00E1 
; 0000 00E2 // USART0 initialization
; 0000 00E3 // USART0 disabled
; 0000 00E4 UCSR0B=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00E5 
; 0000 00E6 // USART1 initialization
; 0000 00E7 // USART1 disabled
; 0000 00E8 UCSR1B=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00E9 
; 0000 00EA // Analog Comparator initialization
; 0000 00EB // Analog Comparator: Off
; 0000 00EC // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00ED ACSR=0x80;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00EE SFIOR=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00EF 
; 0000 00F0 // ADC initialization
; 0000 00F1 // ADC disabled
; 0000 00F2 ADCSRA=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00F3 
; 0000 00F4 // SPI initialization
; 0000 00F5 // SPI disabled
; 0000 00F6 SPCR=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00F7 
; 0000 00F8 // TWI initialization
; 0000 00F9 // TWI disabled
; 0000 00FA TWCR=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00FB 
; 0000 00FC // Global enable interrupts
; 0000 00FD #asm("sei")
;PCODE: $000000A4 VOL: 0
	sei
;PCODE: $000000A5 VOL: 0
; 0000 00FE 
; 0000 00FF while (1)
;PCODE: $000000A6 VOL: 0
; 0000 0100       {
; 0000 0101           if ( (total_overflow_count > _1msec) && (newKeyCheck == SET))
;PCODE: $000000A7 VOL: 1
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 1
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0102           {
; 0000 0103             total_overflow_count = 0;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 1
; 0000 0104             min5_count++;
;PCODE: $000000B3 VOL: 1
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0105             min10_count++;
;PCODE: $000000B7 VOL: 1
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0106             BIT_TOG( STATUS_PORT, STATUS_LED);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0107             FAN1_ON();
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0108             min10_completed = CLR;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 1
; 0000 0109           }
; 0000 010A 
; 0000 010B           if ( newKeyCheck == SET && min10_count > MIN10 && min10_completed == CLR)
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 1
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 1
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 1
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 010C           {
; 0000 010D             FAN1_OFF();
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 010E             FAN2_OFF();
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 010F 
; 0000 0110             newKeyCheck = CLR;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 1
; 0000 0111             min5_count = CLR;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 1
; 0000 0112             min10_count = CLR;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 1
; 0000 0113             min5_completed = CLR;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 1
; 0000 0114             min10_completed = SET;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 1
; 0000 0115           }
; 0000 0116 
; 0000 0117           if ( newKeyCheck == SET && min5_count > MIN5 && min5_completed == CLR)
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 1
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 1
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 1
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0118           {
; 0000 0119             min5_count = 0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 1
; 0000 011A             FAN2_ON();
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 011B             min5_completed = SET;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 1
; 0000 011C           }
; 0000 011D       }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 011E }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
